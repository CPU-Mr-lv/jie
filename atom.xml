<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>文采呱呱</title>
  
  
  <link href="https://cpu-mr-lv.github.io/jie.io/atom.xml" rel="self"/>
  
  <link href="https://cpu-mr-lv.github.io/jie.io/"/>
  <updated>2020-10-29T16:07:21.539Z</updated>
  <id>https://cpu-mr-lv.github.io/jie.io/</id>
  
  <author>
    <name>小杰</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>购物车思路2</title>
    <link href="https://cpu-mr-lv.github.io/jie.io/2020/10/30/shopping2/"/>
    <id>https://cpu-mr-lv.github.io/jie.io/2020/10/30/shopping2/</id>
    <published>2020-10-29T16:01:49.000Z</published>
    <updated>2020-10-29T16:07:21.539Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\jie.io\assets\css\APlayer.min.css"><script src="\jie.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>##首先初始化 Vue 实例</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var app &#x3D; new Vue(&#123;</span><br><span class="line"> el: &#39;#app&#39;,</span><br><span class="line"> data: &#123;</span><br><span class="line">  ...</span><br><span class="line"> &#125;,</span><br><span class="line"> mounted: function () &#123;</span><br><span class="line">  ...</span><br><span class="line"> &#125;,</span><br><span class="line"> computed: &#123;</span><br><span class="line">  ...</span><br><span class="line"> &#125;,</span><br><span class="line"> methods: &#123;</span><br><span class="line">  ...</span><br><span class="line"> &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p> data 来源于服务端数据，这里为了简便，所以直接定义好的数据：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  &#x2F;**</span><br><span class="line">   * 购物车中的商品列表</span><br><span class="line">   *&#x2F;</span><br><span class="line">  list: [</span><br><span class="line">   &#123;</span><br><span class="line">    id: 1,</span><br><span class="line">    name: &#39;韩国进口海牌海苔&#39;,</span><br><span class="line">    price: 39.9,</span><br><span class="line">    count: 1</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">    id: 2,</span><br><span class="line">    name: &#39;印尼进口 Nabati 丽巧克（Richoco）休闲零食 巧克力味 威化饼干&#39;,</span><br><span class="line">    price: 11.8,</span><br><span class="line">    count: 1</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">    id: 3,</span><br><span class="line">    name: &#39;菲律宾进口 道吉草 奶油夹&#39;,</span><br><span class="line">    price: 6.5,</span><br><span class="line">    count: 1</span><br><span class="line">   &#125;</span><br><span class="line">  ],</span><br><span class="line">  &#x2F;&#x2F;选中的商品列表，用于计算总价</span><br><span class="line">  checkList: []</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>list 用于展示 购物车中的商品列表。</p><p>checkList 用于表示勾选中的商品列表，后面，我们会利用它来计算选中商品的总价。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mounted: function () &#123;</span><br><span class="line">  &#x2F;&#x2F;默认全选</span><br><span class="line">  this.checkAll();</span><br><span class="line">  this.checkAllElement(document.querySelector(&quot;.checkAll&quot;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##当 mounted 时，默认全选购物车内的所有商品。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line"> &#x2F;**</span><br><span class="line"> * 总价</span><br><span class="line"> * @returns &#123;string&#125;</span><br><span class="line"> *&#x2F;</span><br><span class="line"> totalPrice: function () &#123;</span><br><span class="line"> var total &#x3D; 0;</span><br><span class="line"> for (var i &#x3D; 0; i &lt; this.checkList.length; i++) &#123;</span><br><span class="line"> var item &#x3D; this.checkList[i];</span><br><span class="line"> total +&#x3D; item.price * item.count;</span><br><span class="line"> &#125;</span><br><span class="line"> return total.toLocaleString();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##在计算属性中，我们定义了总价的计算方式，它会绑定勾选的 checkList 来计算总价。之所以使用 toLocaleString 方法，是因为小数部分会自动四舍五入，而且还会以千分位表示出来</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line"> &#x2F;**</span><br><span class="line"> * 减少购买数量</span><br><span class="line"> * @param index</span><br><span class="line"> *&#x2F;</span><br><span class="line"> reduceCount: function (index) &#123;</span><br><span class="line"> if (this.list[index].count &#x3D;&#x3D;&#x3D; 1) return;</span><br><span class="line"> this.list[index].count--;</span><br><span class="line"> &#125;,</span><br><span class="line"> &#x2F;**</span><br><span class="line"> * 增加购买数量</span><br><span class="line"> * @param index</span><br><span class="line"> *&#x2F;</span><br><span class="line"> addCount: function (index) &#123;</span><br><span class="line"> this.list[index].count++;</span><br><span class="line"> &#125;,</span><br><span class="line"> &#x2F;**</span><br><span class="line"> * 移除商品</span><br><span class="line"> * @param index</span><br><span class="line"> *&#x2F;</span><br><span class="line"> remove: function (index) &#123;</span><br><span class="line"> console.log(&quot;remove-index:&quot; + index);</span><br><span class="line"> this.list.splice(index, 1);</span><br><span class="line"> &#x2F;&#x2F;获取商品序号</span><br><span class="line"> var id &#x3D; index + 1;</span><br><span class="line">    &#x2F;&#x2F;移除实际参与计算的商品</span><br><span class="line"> var $checkList &#x3D; this.checkList;</span><br><span class="line"> for (var i &#x3D; 0; i &lt; $checkList.length; i++) &#123;</span><br><span class="line"> var item &#x3D; $checkList[i];</span><br><span class="line"> if (item.id &#x3D;&#x3D; id) &#123;</span><br><span class="line"> $checkList.splice(i, 1);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> &#x2F;**</span><br><span class="line"> * 全选或全不选</span><br><span class="line"> * @param event</span><br><span class="line"> *&#x2F;</span><br><span class="line"> checkAllOrNot: function (event) &#123;</span><br><span class="line"> if (event.target.checked) &#123;&#x2F;&#x2F;全选</span><br><span class="line"> this.checkAll();</span><br><span class="line"> console.log(&quot;checkList：&quot; + this.checkList);</span><br><span class="line"> &#125; else &#123; &#x2F;&#x2F; 全不选</span><br><span class="line"> console.log(&quot;全不选&quot;);</span><br><span class="line"> this.checkInItems(&#39;noCheckAll&#39;);</span><br><span class="line"> this.checkList.splice(0);&#x2F;&#x2F;清空数组</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> &#x2F;**</span><br><span class="line"> * 全选</span><br><span class="line"> *&#x2F;</span><br><span class="line"> checkAll: function () &#123;</span><br><span class="line"> console.log(&quot;全选&quot;);</span><br><span class="line"> this.checkInItems(&#39;checkAll&#39;);</span><br><span class="line"> this.checkList &#x3D; this.list.concat();&#x2F;&#x2F;复制商品列表</span><br><span class="line"> &#125;,</span><br><span class="line"> &#x2F;**</span><br><span class="line"> * 全选或全不选</span><br><span class="line"> * @param type checkAll：全选；其他：全不选</span><br><span class="line"> *&#x2F;</span><br><span class="line"> checkInItems: function (type) &#123;</span><br><span class="line"> var items &#x3D; document.querySelectorAll(&#39;.checkItem&#39;);</span><br><span class="line"> for (var i &#x3D; 0; i &lt; items.length; i++) &#123;</span><br><span class="line"> var item &#x3D; items[i];</span><br><span class="line"> if (type &#x3D;&#x3D;&#x3D; &#39;checkAll&#39;) &#123;</span><br><span class="line"> item.checked &#x3D; true;</span><br><span class="line"> &#125; else &#123;</span><br><span class="line"> item.checked &#x3D; false;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> &#x2F;**</span><br><span class="line"> * 勾选或不勾选</span><br><span class="line"> *&#x2F;</span><br><span class="line"> checkItem: function (event, index) &#123;</span><br><span class="line"> console.log(&quot;checkItem&quot;);</span><br><span class="line"> var element &#x3D; event.target;</span><br><span class="line"> var $allCheck &#x3D; document.querySelector(&quot;.checkAll&quot;);</span><br><span class="line"> if (element.checked) &#123;&#x2F;&#x2F;勾选，加入已选择列表</span><br><span class="line"> this.checkList.push(this.list[index]);</span><br><span class="line"> this.checkAllElement($allCheck);</span><br><span class="line"> &#125; else &#123;&#x2F;&#x2F;不勾选，从已选择列表中去除</span><br><span class="line"> this.checkList.splice(index, 1);</span><br><span class="line"> $allCheck.checked &#x3D; false;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> &#x2F;**</span><br><span class="line"> * 勾选全选框</span><br><span class="line"> * @param element</span><br><span class="line"> *&#x2F;</span><br><span class="line"> checkAllElement: function (element) &#123;</span><br><span class="line"> &#x2F;&#x2F;如果所有的商品都已被勾选，则勾选全选框</span><br><span class="line"> if (this.checkList.length &#x3D;&#x3D; this.list.length) &#123;</span><br><span class="line"> element.checked &#x3D; true;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 methods 中，我们定义了以下功能方法：</p><p>减少与增加购买数量。在减少购买数量方法中，我们对当前所对应商品的数量进行了二次确认，让代码变得更加健壮（HTML 模板可能被修改，button 被替换为 div 或者 span，那么 disabled 样式就变得无效啦）。</p><p>移除某件商品。因为购物车中的商品列表与实际勾选的商品列表数量上有可能存在差异，所以我们必须通过找到商品 ID 再进行删除。</p><p>勾选相关操作（全选、全不选、单选、单不选等）</p><p>#css</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[v-cloak] &#123;</span><br><span class="line"> display: none;</span><br><span class="line">&#125;</span><br><span class="line">table &#123;</span><br><span class="line"> border: 1px solid #e9e9e9;</span><br><span class="line"> border-collapse: collapse;</span><br><span class="line"> border-spacing: 0;</span><br><span class="line"> empty-cells: show;</span><br><span class="line">&#125;</span><br><span class="line">th &#123;</span><br><span class="line"> font: bold 12px &quot;Trebuchet MS&quot;, Verdana, Arial, Helvetica, sans-serif;</span><br><span class="line"> color: #4f6b72;</span><br><span class="line"> border-right: 1px solid #C1DAD7;</span><br><span class="line"> border-bottom: 1px solid #C1DAD7;</span><br><span class="line"> border-top: 1px solid #C1DAD7;</span><br><span class="line"> letter-spacing: 2px;</span><br><span class="line"> text-transform: uppercase;</span><br><span class="line"> text-align: left;</span><br><span class="line"> padding: 6px 6px 6px 12px;</span><br><span class="line"> background: #CAE8EA;</span><br><span class="line">&#125;</span><br><span class="line">td &#123;</span><br><span class="line"> border-right: 1px solid #C1DAD7;</span><br><span class="line"> border-bottom: 1px solid #C1DAD7;</span><br><span class="line"> background: #fff;</span><br><span class="line"> font-size:14px;</span><br><span class="line"> padding: 6px 6px 6px 12px;</span><br><span class="line"> color: #4f6b72;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里定义了 v-cloak 样式，用于解决网络慢时的闪屏问题。还定义了表格的相关样式。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template v-if&#x3D;&quot;list.length&quot;&gt;</span><br><span class="line"> ...</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;!--当购物车为空时，则提示--&gt;</span><br><span class="line">&lt;div v-else&gt;购物车内暂时没有商品&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>用 table 来展示购物车内的商品列表：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line"> &lt;thead&gt;</span><br><span class="line"> &lt;tr&gt;</span><br><span class="line"> &lt;th&gt;&lt;input id&#x3D;&quot;checkAll&quot; type&#x3D;&quot;checkbox&quot; class&#x3D;&quot;checkAll&quot; @click&#x3D;&quot;checkAllOrNot($event)&quot;&gt;&lt;&#x2F;th&gt;</span><br><span class="line"> &lt;th&gt;序号&lt;&#x2F;th&gt;</span><br><span class="line"> &lt;th&gt;商品&lt;&#x2F;th&gt;</span><br><span class="line"> &lt;th&gt;单价&lt;&#x2F;th&gt;</span><br><span class="line"> &lt;th&gt;数量&lt;&#x2F;th&gt;</span><br><span class="line"> &lt;th&gt;操作&lt;&#x2F;th&gt;</span><br><span class="line"> &lt;&#x2F;tr&gt;</span><br><span class="line"> &lt;&#x2F;thead&gt;</span><br><span class="line"> &lt;tbody&gt;</span><br><span class="line"> &lt;tr v-for&#x3D;&quot;(item,index) in list&quot;&gt;</span><br><span class="line"> &lt;td&gt;&lt;input type&#x3D;&quot;checkbox&quot; class&#x3D;&quot;checkItem&quot; @click&#x3D;&quot;checkItem($event,index)&quot;&gt;&lt;&#x2F;td&gt;</span><br><span class="line"> &lt;td&gt;&#123;&#123;index+1&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line"> &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line"> &lt;td&gt;&#123;&#123;item.price&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line"> &lt;td&gt;</span><br><span class="line"> &lt;button @click&#x3D;&quot;reduceCount(index)&quot; :disabled&#x3D;&quot;item.count&#x3D;&#x3D;&#x3D;1&quot;&gt;-&lt;&#x2F;button&gt;</span><br><span class="line"> &#123;&#123;item.count&#125;&#125;</span><br><span class="line"> &lt;button @click&#x3D;&quot;addCount(index)&quot;&gt;+&lt;&#x2F;button&gt;</span><br><span class="line"> &lt;&#x2F;td&gt;</span><br><span class="line"> &lt;td&gt;</span><br><span class="line"> &lt;button @click&#x3D;&quot;remove(index)&quot;&gt;删除&lt;&#x2F;button&gt;</span><br><span class="line"> &lt;&#x2F;td&gt;</span><br><span class="line"> &lt;&#x2F;tr&gt;</span><br><span class="line"> &lt;&#x2F;tbody&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br><span class="line">&lt;div&gt;总价：￥&#123;&#123;totalPrice&#125;&#125;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\jie.io\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\jie.io\assets\js\APlay</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>vue购物车制作思路</title>
    <link href="https://cpu-mr-lv.github.io/jie.io/2020/10/29/shopping/"/>
    <id>https://cpu-mr-lv.github.io/jie.io/2020/10/29/shopping/</id>
    <published>2020-10-29T15:52:04.000Z</published>
    <updated>2020-10-29T15:57:32.232Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\jie.io\assets\css\APlayer.min.css"><script src="\jie.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot; v-cloak&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;Zenobia_i_banner&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;Zenobia_i_alone&quot; v-for&#x3D;&quot;item,index in list&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;iconfont iconyi&quot; v-if&#x3D;&quot;item.ischeck&quot; @click&#x3D;&quot;select(item.id,index,false,item.nums,item.price,item.total)&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;iconfont iconwei&quot; v-else @click&#x3D;&quot;select(item.id,index,true,item.nums,item.price,item.total)&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;Zenobia_i_alone_caipin&quot;&gt;</span><br><span class="line">                &lt;img class&#x3D;&quot;Zenobia_i_alone_caipin_pic&quot; :src&#x3D;&quot;Zenobia_Url+item.pic&quot; @click&#x3D;&quot;showPic(Zenobia_Url+item.pic)&quot;&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;Zenobia_i_alone_caipin_info&quot;&gt;</span><br><span class="line">                    &lt;div class&#x3D;&quot;Zenobia_i_alone_caipin_info_title&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">                    &lt;div class&#x3D;&quot;Zenobia_i_alone_caipin_info_box&quot;&gt;</span><br><span class="line">                        &lt;div class&#x3D;&quot;Zenobia_i_alone_caipin_info_box_price&quot;&gt;$&#123;&#123;item.price&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">                        &lt;div class&#x3D;&quot;Zenobia_i_alone_caipin_info_box_nums&quot;&gt;</span><br><span class="line">                            &lt;div class&#x3D;&quot;iconfont iconjian&quot; @click&#x3D;&quot;cutNums(index,item.nums,item.price)&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">                            &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;item.nums&quot;&gt;</span><br><span class="line">                            &lt;div class&#x3D;&quot;iconfont iconjia&quot; @click&#x3D;&quot;addNums(index,item.nums,item.price)&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">                        &lt;&#x2F;div&gt;</span><br><span class="line">                    &lt;&#x2F;div&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;Zenobia_i_bottom&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;Zenobia_i_bottom_left&quot; @click&#x3D;&quot;quanxuan&quot;&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;iconfont iconyi&quot; v-if&#x3D;&quot;isquanxuan&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;iconfont iconwei&quot; v-else&gt;&lt;&#x2F;div&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;Zenobia_i_bottom_left_text&quot;&gt;全选&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;Zenobia_i_bottom_right&quot;&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;Zenobia_i_bottom_right_price&quot;&gt;$&#123;&#123;price&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">                &lt;button class&#x3D;&quot;Zenobia_i_bottom_right_btn&quot; type&#x3D;&quot;button&quot; @click&#x3D;&quot;titjiao&quot;&gt;提交订单&lt;&#x2F;button&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">               list: [&#123;</span><br><span class="line">                   &quot;id&quot;: 1,</span><br><span class="line">                   &quot;name&quot;: &quot;Sweet and sour fillet of pork&quot;,&#x2F;&#x2F;商品名称</span><br><span class="line">                   &quot;pic&quot;: &quot;&#x2F;public&#x2F;uploads&#x2F;images&#x2F;pics&#x2F;1.jpg&quot;,&#x2F;&#x2F;商品图片</span><br><span class="line">                   &quot;price&quot;: 100,&#x2F;&#x2F;商品价格</span><br><span class="line">                   &quot;ischeck&quot;: false,&#x2F;&#x2F;默认未选择</span><br><span class="line">                   &quot;nums&quot;: 1,&#x2F;&#x2F;默认数量1</span><br><span class="line">                   &quot;total&quot;: 100&#x2F;&#x2F;先默认单品合计等于单价</span><br><span class="line">               &#125;, &#123;</span><br><span class="line">                   &quot;id&quot;: 2,</span><br><span class="line">                   &quot;name&quot;: &quot;Braised Prawns&quot;,</span><br><span class="line">                   &quot;pic&quot;: &quot;&#x2F;public&#x2F;uploads&#x2F;images&#x2F;pics&#x2F;2.jpg&quot;,</span><br><span class="line">                   &quot;price&quot;: 50,</span><br><span class="line">                   &quot;ischeck&quot;: false,</span><br><span class="line">                   &quot;nums&quot;: 1,</span><br><span class="line">                   &quot;total&quot;: 50</span><br><span class="line">               &#125;],</span><br><span class="line">               goods: [],&#x2F;&#x2F;选中商品数组</span><br><span class="line">               price: 0,&#x2F;&#x2F;合计</span><br><span class="line">               isquanxuan: false,&#x2F;&#x2F;是否全选</span><br><span class="line"></span><br><span class="line">           &#125;,        </span><br><span class="line">           methods: &#123;</span><br><span class="line">               addNums: function(index, nums, price) &#123;</span><br><span class="line">                   var that &#x3D; this;</span><br><span class="line">                   that.list[index].nums++;</span><br><span class="line">                   that.list[index].total &#x3D; that.list[index].total + price</span><br><span class="line">                   if (that.list[index].ischeck) &#123;</span><br><span class="line">                       that.price &#x3D; that.price + price</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;,</span><br><span class="line">               cutNums: function(index, nums, price) &#123;</span><br><span class="line">                   var that &#x3D; this;</span><br><span class="line">                   if (nums &#x3D;&#x3D; 1) &#123;</span><br><span class="line">                       return</span><br><span class="line">                   &#125;</span><br><span class="line">                   that.list[index].nums--;</span><br><span class="line">                   that.list[index].total &#x3D; that.list[index].total - price;</span><br><span class="line">                   if (that.list[index].ischeck) &#123;</span><br><span class="line">                       that.price &#x3D; that.price - price;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;,</span><br><span class="line">               quanxuan: function() &#123;</span><br><span class="line">                   var that &#x3D; this;</span><br><span class="line">                   &#x2F;&#x2F;每次点击全选时选中数组先清空，合计清零</span><br><span class="line">                   that.goods &#x3D; [];</span><br><span class="line">                   that.price &#x3D; 0;</span><br><span class="line">                   if (that.isquanxuan) &#123;&#x2F;&#x2F;取消全选</span><br><span class="line">                       that.isquanxuan &#x3D; false;</span><br><span class="line">                       for (var i in that.list) &#123;</span><br><span class="line">                           that.list[i].ischeck &#x3D; false;&#x2F;&#x2F;所有全部</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125; else &#123;&#x2F;&#x2F;点击全选</span><br><span class="line">                       that.isquanxuan &#x3D; true;</span><br><span class="line">                       for (var i in that.list) &#123;</span><br><span class="line">                           that.list[i].ischeck &#x3D; true;</span><br><span class="line">                           that.price &#x3D; that.price + that.list[i].total;&#x2F;&#x2F;计算合计</span><br><span class="line">                           var goods &#x3D; &#123;</span><br><span class="line">                               id: that.list[i].id,</span><br><span class="line">                               nums: that.list[i].nums,</span><br><span class="line">                               price: that.list[i].price,</span><br><span class="line">                               total: that.list[i].total</span><br><span class="line">                           &#125;</span><br><span class="line">                           that.goods.push(goods);&#x2F;&#x2F;把选中的重新插入到数组中</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">                   console.log(JSON.stringify(that.goods))</span><br><span class="line">               &#125;,</span><br><span class="line">               select: function(id, index, ischeck, nums, price, total) &#123;</span><br><span class="line">                   var that &#x3D; this;</span><br><span class="line">                   that.list[index].ischeck &#x3D; ischeck;</span><br><span class="line">                   console.log(JSON.stringify(that.goods))</span><br><span class="line">                   if (ischeck) &#123;</span><br><span class="line">                       that.price &#x3D; that.price + parseInt(total);</span><br><span class="line">                       for (var i in that.goods) &#123;</span><br><span class="line">                           if (that.goods[i].id &#x3D;&#x3D; id) &#123;</span><br><span class="line">                               that.goods[i].nums &#x3D; that.goods[i].nums + nums</span><br><span class="line">                               that.goods[i].total &#x3D; that.goods[i].total + total</span><br><span class="line">                               return</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                       var goods &#x3D; &#123;</span><br><span class="line">                           id: id,</span><br><span class="line">                           nums: nums,</span><br><span class="line">                           price: price,</span><br><span class="line">                           total: total</span><br><span class="line">                       &#125;</span><br><span class="line">                       that.goods.push(goods);</span><br><span class="line">                   &#125; else &#123;</span><br><span class="line">                       that.price &#x3D; that.price - parseInt(total);</span><br><span class="line">                       for (var i in that.goods) &#123;</span><br><span class="line">                           if (that.goods[i].id &#x3D;&#x3D; id) &#123;</span><br><span class="line">                               that.goods.splice(i, 1)</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;,</span><br><span class="line">            &#125;            </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\jie.io\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\jie.io\assets\js\APlay</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>h5语义化</title>
    <link href="https://cpu-mr-lv.github.io/jie.io/2020/10/28/h5%E8%AF%AD%E4%B9%89%E5%8C%96/"/>
    <id>https://cpu-mr-lv.github.io/jie.io/2020/10/28/h5%E8%AF%AD%E4%B9%89%E5%8C%96/</id>
    <published>2020-10-28T14:38:57.000Z</published>
    <updated>2020-10-28T14:40:27.200Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\jie.io\assets\css\APlayer.min.css"><script src="\jie.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>什么是语义化？<br>语义化就是用合理、正确的标签来展示内容，比如h1~h6定义标题。<br>#特点</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">易于用户阅读，样式丢失的时候能让页面呈现清晰的结构。</span><br><span class="line">有利于SEO，搜索引擎根据标签来确定上下文和各个关键字的权重。</span><br><span class="line">方便其他设备解析，如盲人阅读器根据语义渲染网页</span><br><span class="line">有利于开发和维护，语义化更具可读性，代码更好维护，与CSS3关系更和谐。</span><br></pre></td></tr></table></figure><p>#语义化标签结构</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、&lt;header&gt;</span><br><span class="line"></span><br><span class="line">   &lt;header&gt;定义文档或者文档的部分区域的页眉，应作为介绍内容或者导航链接栏的容器。</span><br><span class="line"></span><br><span class="line">   在一个文档中，您可以定义多个&lt;header&gt;元素，但需要注意的是&lt;header&gt;元素不能作为&lt;address&gt;、&lt;footer&gt; 或 &lt;header&gt; 元素的子元素。</span><br><span class="line"></span><br><span class="line">   2、&lt;nav&gt;</span><br><span class="line"></span><br><span class="line">   &lt;nav&gt;描述一个含有多个超链接的区域，该区域包含跳转到其他页面或页面内部其他部分的链接列表。</span><br><span class="line"></span><br><span class="line">   在一个文档中，可定义多个&lt;nav&gt;元素。</span><br><span class="line"></span><br><span class="line">   3、&lt;main&gt;</span><br><span class="line"></span><br><span class="line">   &lt;main&gt; 定义文档的主要内容，该内容在文档中应当是独一无二的，不包含任何在文档中重复的内容，比如侧边栏，导航栏链接，版权信息，网站logo，搜索框（除非搜索框作为文档的主要功能）。</span><br><span class="line"></span><br><span class="line">   需要注意的是在一个文档中不能出现多个&lt;main&gt;标签。</span><br><span class="line"></span><br><span class="line">   4、&lt;article&gt;</span><br><span class="line"></span><br><span class="line">   &lt;article&gt;元素表示文档、页面、应用或网站中的独立结构，是可独立分配的、可复用的结构，如在发布中，它可能是论坛帖子、杂志或新闻文章、博客、用户提交的评论、交互式组件，或者其他独立的内容项目。</span><br><span class="line"></span><br><span class="line">   当&lt;article&gt;元素嵌套使用时，则该元素代表与外层元素有关的文章。例如，代表博客评论的&lt;article&gt;元素可嵌套在代表博客文章的&lt;article&gt;元素中。</span><br><span class="line"></span><br><span class="line">   5、&lt;aside&gt;</span><br><span class="line"></span><br><span class="line">   &lt;aside&gt; 元素表示一个和其余页面内容几乎无关的部分，被认为是独立于该内容的一部分且可以被单独的拆分出来而不会影响整体。通常表现为侧边栏或嵌入内容。</span><br><span class="line"></span><br><span class="line">   6、&lt;footer&gt;</span><br><span class="line"></span><br><span class="line">   &lt;footer&gt;定义最近一个章节内容或者根节点元素的页脚。一个页脚通常包含该章节作者、版权数据或者与文档相关的链接等信息。</span><br><span class="line"></span><br><span class="line">   使用footer插入联系信息时，应在 footer 元素内使用 &lt;address&gt; 元素。</span><br><span class="line"></span><br><span class="line">   注意不能包含&lt;footer&gt;或者&lt;header&gt;</span><br><span class="line"></span><br><span class="line">   7、&lt;section&gt;</span><br><span class="line"></span><br><span class="line">   &lt;section&gt;表示文档中的一个区域（或节），比如，内容中的一个专题组。</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\jie.io\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\jie.io\assets\js\APlay</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>盒模型</title>
    <link href="https://cpu-mr-lv.github.io/jie.io/2020/10/28/%E7%9B%92%E6%A8%A1%E5%9E%8B/"/>
    <id>https://cpu-mr-lv.github.io/jie.io/2020/10/28/%E7%9B%92%E6%A8%A1%E5%9E%8B/</id>
    <published>2020-10-28T14:36:30.000Z</published>
    <updated>2020-10-28T14:37:10.381Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\jie.io\assets\css\APlayer.min.css"><script src="\jie.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>盒模型指什么？</p><p>Margin(外边距) - 清除边框外的区域，外边距是透明的。<br>Border(边框) - 围绕在内边距和内容外的边框。<br>Padding(内边距) - 清除内容周围的区域，内边距是透明的。<br>Content(内容) - 盒子的内容，显示文本和图像。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\jie.io\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\jie.io\assets\js\APlay</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>cookies和session的区别</title>
    <link href="https://cpu-mr-lv.github.io/jie.io/2020/10/28/cookie/"/>
    <id>https://cpu-mr-lv.github.io/jie.io/2020/10/28/cookie/</id>
    <published>2020-10-28T14:34:14.000Z</published>
    <updated>2020-10-28T14:34:56.305Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\jie.io\assets\css\APlayer.min.css"><script src="\jie.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1、数据bai存放du位置不同：</p><p>cookie数据存放在客户的zhi浏览器上，session数据放在服务器上。</p><p>2、安全程度不dao同：</p><p>cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗,考虑到安全应当使用session。</p><p>3、性能使用程度不同：</p><p>session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能,考虑到减轻服务器性能方面，应当使用cookie。</p><p>4、数据存储大小不同：</p><p>单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie，而session则存储与服务端，浏览器对其没有限制。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\jie.io\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\jie.io\assets\js\APlay</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vue Router</title>
    <link href="https://cpu-mr-lv.github.io/jie.io/2020/10/28/Vue-Router/"/>
    <id>https://cpu-mr-lv.github.io/jie.io/2020/10/28/Vue-Router/</id>
    <published>2020-10-28T14:30:26.000Z</published>
    <updated>2020-10-28T14:33:26.770Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\jie.io\assets\css\APlayer.min.css"><script src="\jie.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>##vue router是什么？</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue Router 是 Vue.js 官方的路由管理器。实际上就是可以理解为指向，即在页面上点击一个按钮需要跳转到对应的页面，这就是路由跳转；</span><br></pre></td></tr></table></figure><h2 id="vue-router的安装"><a href="#vue-router的安装" class="headerlink" title="vue router的安装"></a>vue router的安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install vue-cli</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\jie.io\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\jie.io\assets\js\APlay</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>vue</title>
    <link href="https://cpu-mr-lv.github.io/jie.io/2020/10/28/vue/"/>
    <id>https://cpu-mr-lv.github.io/jie.io/2020/10/28/vue/</id>
    <published>2020-10-28T14:25:58.000Z</published>
    <updated>2020-10-28T14:29:16.829Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\jie.io\assets\css\APlayer.min.css"><script src="\jie.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>##什么是vue？</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue 是一套用于构建用户界面的渐进式框架，项目如果需要更换框架，则需要重新架构整个项目</span><br></pre></td></tr></table></figure><p>##Vue作为前端框架的特点是什么？</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.构建用户界面，只需要关系view层</span><br><span class="line">2.简单易学，轻量快速</span><br><span class="line">3.渐进式框架</span><br></pre></td></tr></table></figure><p>##vue的两大核心是什么？</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.响应式的数据绑定：当数据发生改变，视图可以自动更新，可以不用关心dom操作，而专心数据操作</span><br><span class="line">2.可组合的视图组件：把视图按照功能切分成若干基本单元，组件可以一级一级组合整个应用形成倒置组件树，可维护，可重用，可测试</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\jie.io\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\jie.io\assets\js\APlay</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>promise</title>
    <link href="https://cpu-mr-lv.github.io/jie.io/2020/10/28/promise/"/>
    <id>https://cpu-mr-lv.github.io/jie.io/2020/10/28/promise/</id>
    <published>2020-10-28T13:35:53.000Z</published>
    <updated>2020-10-28T13:41:48.174Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\jie.io\assets\css\APlayer.min.css"><script src="\jie.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>##promise是什么？</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、主要用于异步计算</span><br><span class="line">2、可以将异步操作队列化，按照期望的顺序执行，返回符合预期的结果</span><br><span class="line">3、可以在对象之间传递和操作promise，帮助我们处理队列</span><br></pre></td></tr></table></figure><p>##promise</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">promise是一个对象，对象和函数的区别就是对象可以保存状态，函数不可以（闭包除外）</span><br><span class="line">并未剥夺函数return的能力，因此无需层层传递callback，进行回调获取数据</span><br><span class="line">代码风格，容易理解，便于维护</span><br><span class="line">多个异步等待合并便于解决</span><br></pre></td></tr></table></figure><p>##promise详解</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">resolve作用是，将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；</span><br><span class="line">reject作用是，将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</span><br><span class="line">promise有三个状态：</span><br><span class="line">1、pending[待定]初始状态</span><br><span class="line">2、fulfilled[实现]操作成功</span><br><span class="line">3、rejected[被否决]操作失败</span><br><span class="line">当promise状态发生改变，就会触发then()里的响应函数处理后续步骤；</span><br><span class="line">promise状态一经改变，不会再变。</span><br><span class="line">Promise对象的状态改变，只有两种可能：</span><br><span class="line">从pending变为fulfilled</span><br><span class="line">从pending变为rejected。</span><br><span class="line">这两种情况只要发生，状态就凝固了，不会再变了。</span><br></pre></td></tr></table></figure><p>##示例一</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new Promise(resolve &#x3D;&gt; &#123;</span><br><span class="line">  setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">    resolve(&#39;hello&#39;)</span><br><span class="line">  &#125;, 2000)</span><br><span class="line">&#125;).then(res &#x3D;&gt; &#123;</span><br><span class="line">  console.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>##分两次，顺序执行</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new Promise(resolve &#x3D;&gt; &#123;</span><br><span class="line">    setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">      resolve(&#39;hello&#39;)</span><br><span class="line">    &#125;, 2000)</span><br><span class="line">  &#125;).then(val &#x3D;&gt; &#123;</span><br><span class="line">    console.log(val) &#x2F;&#x2F;  参数val &#x3D; &#39;hello&#39;</span><br><span class="line">    return new Promise(resolve &#x3D;&gt; &#123;</span><br><span class="line">      setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">        resolve(&#39;world&#39;)</span><br><span class="line">      &#125;, 2000)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;).then(val &#x3D;&gt; &#123;</span><br><span class="line">    console.log(val) &#x2F;&#x2F; 参数val &#x3D; &#39;world&#39;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>##promise完成后then()</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let pro &#x3D; new Promise(resolve &#x3D;&gt; &#123;</span><br><span class="line">   setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">     resolve(&#39;hello world&#39;)</span><br><span class="line">   &#125;, 2000)</span><br><span class="line"> &#125;)</span><br><span class="line"> setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">   pro.then(value &#x3D;&gt; &#123;</span><br><span class="line">   console.log(value) &#x2F;&#x2F; hello world</span><br><span class="line"> &#125;)</span><br><span class="line"> &#125;, 2000)</span><br></pre></td></tr></table></figure><p> ##.then()</p><pre><code>.then()1、接收两个函数作为参数，分别代表fulfilled（成功）和rejected（失败）2、.then()返回一个新的Promise实例，所以它可以链式调用3、当前面的Promise状态改变时，.then()根据其最终状态，选择特定的状态响应函数执行4、状态响应函数可以返回新的promise，或其他值，不返回值也可以我们可以认为它返回了一个null；5、如果返回新的promise，那么下一级.then()会在新的promise状态改变之后执行6、如果返回其他任何值，则会立即执行下一级.then()</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\jie.io\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\jie.io\assets\js\APlay</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>axios</title>
    <link href="https://cpu-mr-lv.github.io/jie.io/2020/10/28/My-Gallery/"/>
    <id>https://cpu-mr-lv.github.io/jie.io/2020/10/28/My-Gallery/</id>
    <published>2020-10-28T13:14:20.000Z</published>
    <updated>2020-10-29T15:48:21.582Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\jie.io\assets\css\APlayer.min.css"><script src="\jie.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>##Axios是什么？</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">axios 是基于promise的http库</span><br></pre></td></tr></table></figure><p>##axios用在什么场景？</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">像Vue、React、Node等项目就可以使用Axios</span><br></pre></td></tr></table></figure><p>##Axios特性</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、可以在浏览器中发送 XMLHttpRequests</span><br><span class="line">2、可以在 node.js 发送 http 请求</span><br><span class="line">3、支持 Promise API</span><br><span class="line">4、拦截请求和响应</span><br><span class="line">5、转换请求数据和响应数据</span><br><span class="line">6、能够取消请求</span><br><span class="line">7、自动转换 JSON 数据</span><br><span class="line">8、客户端支持保护安全免受 XSRF 攻击</span><br></pre></td></tr></table></figure><p>##Axios如何使用？</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\jie.io\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\jie.io\assets\js\APlay</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>vue过场动画</title>
    <link href="https://cpu-mr-lv.github.io/jie.io/2020/10/26/zi/"/>
    <id>https://cpu-mr-lv.github.io/jie.io/2020/10/26/zi/</id>
    <published>2020-10-26T15:12:12.000Z</published>
    <updated>2020-10-26T15:32:19.207Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\jie.io\assets\css\APlayer.min.css"><script src="\jie.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="vue过场动画"><a href="#vue过场动画" class="headerlink" title="vue过场动画"></a>vue过场动画</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;transition :enter-active-class&#x3D;&quot;enterTransition&quot; :leave-active-class&#x3D;&quot;leaveTransition&quot;&gt;</span><br><span class="line">      &lt;keep-alive&gt;</span><br><span class="line">        &lt;router-view class&#x3D;&quot;routeView&quot; &#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;keep-alive&gt;</span><br><span class="line">    &lt;&#x2F;transition&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import myhea from &quot;@&#x2F;components&#x2F;hea.vue&quot;;</span><br><span class="line">import myfooter from &quot;@&#x2F;components&#x2F;footer.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    myhea,</span><br><span class="line">    myfooter,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      enterTransition: &quot;animate__animated animate__fadeIn&quot;,</span><br><span class="line">      leaveTransition: &quot;animate__animated animate__fadeOut&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    $route(to, from) &#123;</span><br><span class="line">      let toDepth &#x3D; to.meta.depth;</span><br><span class="line">      let fromDepth &#x3D; from.meta.depth;</span><br><span class="line">      if (fromDepth &gt; toDepth) &#123;</span><br><span class="line">        this.enterTransition &#x3D; &quot;animate__animated animate__fadeInLeft&quot;;</span><br><span class="line">        this.leaveTransition &#x3D; &quot;animate__animated animate__fadeOutRight&quot;;</span><br><span class="line">      &#125; else if (fromDepth &lt; toDepth) &#123;</span><br><span class="line">        this.enterTransition &#x3D; &quot;animate__animated animate__fadeInRight&quot;;</span><br><span class="line">        this.leaveTransition &#x3D; &quot;animate__animated animate__fadeOutLeft&quot;;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this.enterTransition &#x3D; &quot;animate__animated animate__fadeIn&quot;;</span><br><span class="line">        this.leaveTransition &#x3D; &quot;animate__animated animate__fadeOut&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.routeView &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  left: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">  top: 0;</span><br><span class="line">  bottom: 0;</span><br><span class="line">&#125;</span><br><span class="line">* &#123;</span><br><span class="line">  margin: 0px;</span><br><span class="line">  padding: 0px;</span><br><span class="line">&#125;</span><br><span class="line">#app &#123;</span><br><span class="line">  min-width: 20rem;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">$ npm install animate.css --save</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\jie.io\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\jie.io\assets\js\APlay</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>移动端自适应</title>
    <link href="https://cpu-mr-lv.github.io/jie.io/2020/10/26/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%87%AA%E9%80%82%E5%BA%94/"/>
    <id>https://cpu-mr-lv.github.io/jie.io/2020/10/26/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%87%AA%E9%80%82%E5%BA%94/</id>
    <published>2020-10-26T14:06:56.000Z</published>
    <updated>2020-10-26T14:28:52.382Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\jie.io\assets\css\APlayer.min.css"><script src="\jie.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="移动端自适应"><a href="#移动端自适应" class="headerlink" title="移动端自适应"></a>移动端自适应</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width,initial-scale&#x3D;1.0,maximum-scale&#x3D;1.0,minimum-scale&#x3D;1.0,user-scalable&#x3D;no&quot;&gt;</span><br></pre></td></tr></table></figure><p>width=device-width width为设置layout viewport 的宽度，为一个正整数，”width-device”表示宽度是设备屏幕的宽度<br>initial-scale=1.0 initial-scale为设置页面的初始缩放值，可以是一个带小数的数字，1.0就是占网页的100%<br>minimum-scale=1.0 表示最小的缩放比例<br>maximum-scale=1.0 表示最大的缩放比例<br>user-scalable=no 表示用户是否可以调整缩放比例，值为”no”或”yes”</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\jie.io\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\jie.io\assets\js\APlay</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>文采呱呱的新博客</title>
    <link href="https://cpu-mr-lv.github.io/jie.io/2020/10/25/My-New-Post/"/>
    <id>https://cpu-mr-lv.github.io/jie.io/2020/10/25/My-New-Post/</id>
    <published>2020-10-25T11:32:35.000Z</published>
    <updated>2020-10-25T11:55:53.871Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\jie.io\assets\css\APlayer.min.css"><script src="\jie.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>由博客园换新家啦，知识持续更新中…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\jie.io\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\jie.io\assets\js\APlay</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://cpu-mr-lv.github.io/jie.io/2020/10/25/hello-world/"/>
    <id>https://cpu-mr-lv.github.io/jie.io/2020/10/25/hello-world/</id>
    <published>2020-10-25T10:00:45.908Z</published>
    <updated>2020-10-25T10:00:45.908Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\jie.io\assets\css\APlayer.min.css"><script src="\jie.io\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\jie.io\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\jie.io\assets\js\APlay</summary>
      
    
    
    
    
  </entry>
  
</feed>
